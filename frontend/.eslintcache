[{"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\index.tsx":"1","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\reportWebVitals.ts":"2","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\App.tsx":"3","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\pages\\IndexPage.tsx":"4","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\components\\table\\RSTable.tsx":"5","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\components\\filter\\RSFilter.tsx":"6","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\api.ts":"7","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\helpers\\local-storage.ts":"8","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\utilities.ts":"9","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\helpers\\mappers.ts":"10","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\helpers\\data-calculations.ts":"11","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\components\\expanded-row\\RSExpandedRow.tsx":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":177,"mtime":1610883368954,"results":"16","hashOfConfig":"14"},{"size":15782,"mtime":1610921820245,"results":"17","hashOfConfig":"14"},{"size":2330,"mtime":1610919157679,"results":"18","hashOfConfig":"14"},{"size":616,"mtime":1610902467011,"results":"19","hashOfConfig":"14"},{"size":1635,"mtime":1610896787949,"results":"20","hashOfConfig":"14"},{"size":375,"mtime":1610886317400,"results":"21","hashOfConfig":"14"},{"size":244,"mtime":1610609716635,"results":"22","hashOfConfig":"14"},{"size":1162,"mtime":1610889529974,"results":"23","hashOfConfig":"14"},{"size":3055,"mtime":1610890011902,"results":"24","hashOfConfig":"14"},{"size":5337,"mtime":1610921002328,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"ocrkvh",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\index.tsx",[],["53","54"],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\reportWebVitals.ts",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\App.tsx",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\pages\\IndexPage.tsx",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\components\\table\\RSTable.tsx",["55","56","57"],"import classNames from 'classnames';\r\nimport {Table} from 'antd';\r\nimport * as React from 'react';\r\nimport {ColumnType} from 'antd/es/table';\r\nimport {PanelRender} from 'rc-table/lib/interface';\r\nimport './RSTable.styles.scss';\r\nimport {createRef, FunctionComponent, useEffect, useState} from 'react';\r\nimport {TickerWithSubmissionIdsForEachDay} from '../../models/TableData';\r\nimport {RSFilter} from '../filter/RSFilter';\r\nimport {formatDate} from '../../utilities';\r\n\r\nexport const RSTable: FunctionComponent<RSTableProps> = ({loading, columns, rows, onExpandedRowRender, header,\r\n                     dataUpdatedAt}) => {\r\n    const [headerHeight, setHeaderHeight] = useState<number>(0);\r\n    useEffect(() => {\r\n        const headerEl = document.querySelector('.main-data-table .ant-table-header');\r\n        const currentHeight = headerEl!.clientHeight;\r\n        if (currentHeight !== headerHeight) {\r\n            setHeaderHeight(currentHeight);\r\n        }\r\n    })\r\n\r\n    return (\r\n        <Table\r\n\r\n            className={'main-data-table'}\r\n            rowKey={'ticker'}\r\n            loading={loading}\r\n            rowClassName={(_, i) => classNames({ 'odd-row': i % 2 === 1 })}\r\n            showSorterTooltip={false}\r\n            sortDirections={['descend', 'ascend']}\r\n            size={'small'}\r\n            columns={columns}\r\n            dataSource={rows}\r\n            pagination={{\r\n                defaultPageSize: 50,\r\n                showTotal: (_totalRows) =>\r\n                    <span className={'updated-at'}>\r\n                        { dataUpdatedAt &&\r\n                        `Updated at: ${formatDate(dataUpdatedAt)}`\r\n                        }\r\n                    </span>\r\n            }}\r\n            bordered={true}\r\n            expandable={{\r\n                expandedRowRender: onExpandedRowRender,\r\n            }}\r\n            title={header}\r\n            scroll={{ x: '100vw', y: `calc(100vh - 41px - 24px - 4px - ${headerHeight}px - 1px)`}}\r\n        />\r\n    );\r\n}\r\n\r\n\r\n\r\ninterface RSTableProps {\r\n    loading: boolean;\r\n    columns: ColumnType<TickerWithSubmissionIdsForEachDay>[];\r\n    rows: TickerWithSubmissionIdsForEachDay[];\r\n    onExpandedRowRender: (row: TickerWithSubmissionIdsForEachDay) => JSX.Element;\r\n    header: PanelRender<TickerWithSubmissionIdsForEachDay>;\r\n    dataUpdatedAt?: Date;\r\n}\r\n","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\components\\filter\\RSFilter.tsx",["58","59"],"import * as React from 'react';\r\nimport {Button, Checkbox, Skeleton, Spin} from \"antd\";\r\nimport {CheckboxValueType} from 'antd/es/checkbox/Group';\r\nimport {FunctionComponent} from 'react';\r\n\r\nexport const RSFilter: FunctionComponent<RSFilterProps> = ({subreddits, selectedSubreddits, onChange}) => {\r\n    return (\r\n        <Checkbox.Group\r\n            options={subreddits}\r\n            value={selectedSubreddits}\r\n            onChange={onChange}\r\n        />\r\n    );\r\n}\r\n\r\ninterface RSFilterProps {\r\n    subreddits: string[];\r\n    selectedSubreddits: string[];\r\n    onChange: (value: CheckboxValueType[]) => void\r\n}\r\n","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\api.ts",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\helpers\\local-storage.ts",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\utilities.ts",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\helpers\\mappers.ts",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\helpers\\data-calculations.ts",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend2\\src\\components\\expanded-row\\RSExpandedRow.tsx",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":7,"column":9,"nodeType":"66","messageId":"67","endLine":7,"endColumn":18},{"ruleId":"64","severity":1,"message":"68","line":9,"column":9,"nodeType":"66","messageId":"67","endLine":9,"endColumn":17},{"ruleId":"69","severity":1,"message":"70","line":15,"column":5,"nodeType":"66","endLine":15,"endColumn":14,"suggestions":"71"},{"ruleId":"64","severity":1,"message":"72","line":2,"column":9,"nodeType":"66","messageId":"67","endLine":2,"endColumn":15},{"ruleId":"64","severity":1,"message":"73","line":2,"column":27,"nodeType":"66","messageId":"67","endLine":2,"endColumn":35},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"@typescript-eslint/no-unused-vars","'createRef' is defined but never used.","Identifier","unusedVar","'RSFilter' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setHeaderHeight'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [headerHeight] as a second argument to the useEffect Hook.",["76"],"'Button' is defined but never used.","'Skeleton' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},"Add dependencies array: [headerHeight]",{"range":"79","text":"80"},[966,966],", [headerHeight]"]