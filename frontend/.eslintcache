[{"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\index.tsx":"1","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\App.tsx":"3","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\pages\\IndexPage.tsx":"4","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\api.ts":"5","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\helpers\\data-calculations.ts":"6","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\helpers\\local-storage.ts":"7","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\helpers\\mappers.ts":"8","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\components\\filter\\RSFilter.tsx":"9","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\components\\table\\RSTable.tsx":"10","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\components\\expanded-row\\RSExpandedRow.tsx":"11","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\utilities.ts":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":177,"mtime":1610883368954,"results":"16","hashOfConfig":"14"},{"size":15743,"mtime":1611060677340,"results":"17","hashOfConfig":"14"},{"size":1635,"mtime":1610896787949,"results":"18","hashOfConfig":"14"},{"size":3055,"mtime":1610890011902,"results":"19","hashOfConfig":"14"},{"size":375,"mtime":1610886317400,"results":"20","hashOfConfig":"14"},{"size":1162,"mtime":1610889529974,"results":"21","hashOfConfig":"14"},{"size":592,"mtime":1610928007672,"results":"22","hashOfConfig":"14"},{"size":2709,"mtime":1610928723155,"results":"23","hashOfConfig":"14"},{"size":6659,"mtime":1611060618780,"results":"24","hashOfConfig":"14"},{"size":244,"mtime":1610609716635,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1yfrt3r",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\index.tsx",[],["52","53"],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\App.tsx",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\pages\\IndexPage.tsx",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\api.ts",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\helpers\\data-calculations.ts",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\helpers\\local-storage.ts",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\helpers\\mappers.ts",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\components\\filter\\RSFilter.tsx",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\components\\table\\RSTable.tsx",["54"],"import classNames from 'classnames';\r\nimport {Table} from 'antd';\r\nimport * as React from 'react';\r\nimport {ColumnType} from 'antd/es/table';\r\nimport {PanelRender} from 'rc-table/lib/interface';\r\nimport './RSTable.styles.scss';\r\nimport {FunctionComponent, useEffect, useState} from 'react';\r\nimport {TickerWithSubmissionIdsForEachDay} from '../../models/TableData';\r\nimport {formatDate} from '../../utilities';\r\nimport {Key, SorterResult, TableCurrentDataSource, TablePaginationConfig} from 'antd/lib/table/interface';\r\n\r\nexport const RSTable: FunctionComponent<RSTableProps> = ({loading, columns, rows, onExpandedRowRender, header,\r\n                     dataUpdatedAt, onChange}) => {\r\n    const [headerHeight, setHeaderHeight] = useState<number>(0);\r\n    useEffect(() => {\r\n        const headerEl = document.querySelector('.main-data-table .ant-table-header');\r\n        const currentHeight = headerEl!.clientHeight;\r\n        if (currentHeight !== headerHeight) {\r\n            setHeaderHeight(currentHeight);\r\n        }\r\n    })\r\n\r\n    return (\r\n        <Table\r\n            className={'main-data-table'}\r\n            rowKey={'ticker'}\r\n            loading={loading}\r\n            rowClassName={(_, i) => classNames({ 'odd-row': i % 2 === 1 })}\r\n            showSorterTooltip={false}\r\n            sortDirections={['descend', 'ascend']}\r\n            size={'small'}\r\n            columns={columns}\r\n            dataSource={rows}\r\n            pagination={{\r\n                defaultPageSize: 50,\r\n                showTotal: (_totalRows) =>\r\n                    <span className={'updated-at'}>\r\n                        { dataUpdatedAt &&\r\n                        `Updated at: ${formatDate(dataUpdatedAt)}`\r\n                        }\r\n                    </span>\r\n            }}\r\n            bordered={true}\r\n            expandable={{\r\n                expandedRowRender: onExpandedRowRender,\r\n            }}\r\n            title={header}\r\n            scroll={{ x: '100vw', y: `calc(100vh - 41px - 24px - 4px - ${headerHeight}px - 1px)`}}\r\n            onChange={onChange}\r\n        />\r\n    );\r\n}\r\n\r\n\r\n\r\ninterface RSTableProps {\r\n    loading: boolean;\r\n    columns: ColumnType<TickerWithSubmissionIdsForEachDay>[];\r\n    rows: TickerWithSubmissionIdsForEachDay[];\r\n    onExpandedRowRender: (row: TickerWithSubmissionIdsForEachDay) => JSX.Element;\r\n    header: PanelRender<TickerWithSubmissionIdsForEachDay>;\r\n    dataUpdatedAt?: Date;\r\n    onChange: (pagination: TablePaginationConfig, filters: Record<string, (Key | boolean)[] | null>, sorter: SorterResult<TickerWithSubmissionIdsForEachDay> | SorterResult<TickerWithSubmissionIdsForEachDay>[], extra: TableCurrentDataSource<TickerWithSubmissionIdsForEachDay>) => void\r\n}\r\n","C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\components\\expanded-row\\RSExpandedRow.tsx",[],"C:\\Users\\daini\\Dev\\reddit-stonks\\frontend\\src\\utilities.ts",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":15,"column":5,"nodeType":"61","endLine":15,"endColumn":14,"suggestions":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setHeaderHeight'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [headerHeight] as a second argument to the useEffect Hook.","Identifier",["65"],"no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},"Add dependencies array: [headerHeight]",{"range":"68","text":"69"},[1027,1027],", [headerHeight]"]